{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-16T10:02:36.079615Z","iopub.execute_input":"2024-09-16T10:02:36.080235Z","iopub.status.idle":"2024-09-16T10:02:36.085248Z","shell.execute_reply.started":"2024-09-16T10:02:36.080197Z","shell.execute_reply":"2024-09-16T10:02:36.084199Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"pip install ultralytics --upgrade","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:16:21.957786Z","iopub.execute_input":"2024-09-16T09:16:21.958165Z","iopub.status.idle":"2024-09-16T09:16:35.999001Z","shell.execute_reply.started":"2024-09-16T09:16:21.958131Z","shell.execute_reply":"2024-09-16T09:16:35.997832Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import wandb\nwandb.login(key=\"caa854bcf02f1a45ec737cc926418472288799ed\")","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:14:12.564352Z","iopub.execute_input":"2024-09-16T09:14:12.565113Z","iopub.status.idle":"2024-09-16T09:14:15.683042Z","shell.execute_reply.started":"2024-09-16T09:14:12.565070Z","shell.execute_reply":"2024-09-16T09:14:15.681883Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!pip install roboflow --upgrade","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:14:15.684912Z","iopub.execute_input":"2024-09-16T09:14:15.685451Z","iopub.status.idle":"2024-09-16T09:14:30.290588Z","shell.execute_reply.started":"2024-09-16T09:14:15.685417Z","shell.execute_reply":"2024-09-16T09:14:30.289414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from roboflow import Roboflow\nrf = Roboflow(api_key=\"UBtflk4XxxlqvBlLDrQX\")\nproject = rf.workspace(\"airotor\").project(\"merged-project-2-env1e\")\nversion = project.version(2)\ndataset = version.download(\"yolov8\")","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:14:30.292206Z","iopub.execute_input":"2024-09-16T09:14:30.292655Z","iopub.status.idle":"2024-09-16T09:14:57.883884Z","shell.execute_reply.started":"2024-09-16T09:14:30.292606Z","shell.execute_reply":"2024-09-16T09:14:57.882958Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import yaml\n\nwith open('/kaggle/working/Merged-Project-2-2/data.yaml', 'r') as file:\n    data = yaml.safe_load(file)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:14:57.886756Z","iopub.execute_input":"2024-09-16T09:14:57.887348Z","iopub.status.idle":"2024-09-16T09:14:57.894316Z","shell.execute_reply.started":"2024-09-16T09:14:57.887313Z","shell.execute_reply":"2024-09-16T09:14:57.893319Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:15:18.756402Z","iopub.execute_input":"2024-09-16T09:15:18.757130Z","iopub.status.idle":"2024-09-16T09:15:18.763208Z","shell.execute_reply.started":"2024-09-16T09:15:18.757091Z","shell.execute_reply":"2024-09-16T09:15:18.762280Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['test'] = '/kaggle/working/Merged-Project-2-2/test'","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:50:14.322130Z","iopub.execute_input":"2024-09-16T09:50:14.322551Z","iopub.status.idle":"2024-09-16T09:50:14.326962Z","shell.execute_reply.started":"2024-09-16T09:50:14.322494Z","shell.execute_reply":"2024-09-16T09:50:14.325964Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['train'] = '/kaggle/working/Merged-Project-2-2/train'","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:50:14.656226Z","iopub.execute_input":"2024-09-16T09:50:14.657123Z","iopub.status.idle":"2024-09-16T09:50:14.661259Z","shell.execute_reply.started":"2024-09-16T09:50:14.657082Z","shell.execute_reply":"2024-09-16T09:50:14.660391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data['val'] = '/kaggle/working/Merged-Project-2-2/valid'","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:50:36.682170Z","iopub.execute_input":"2024-09-16T09:50:36.682565Z","iopub.status.idle":"2024-09-16T09:50:36.686836Z","shell.execute_reply.started":"2024-09-16T09:50:36.682515Z","shell.execute_reply":"2024-09-16T09:50:36.685969Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"with open('/kaggle/working/Merged-Project-2-2/data.yaml', 'w') as file:\n    yaml.dump(data, file)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:58:10.917139Z","iopub.execute_input":"2024-09-16T09:58:10.918029Z","iopub.status.idle":"2024-09-16T09:58:10.924212Z","shell.execute_reply.started":"2024-09-16T09:58:10.917987Z","shell.execute_reply":"2024-09-16T09:58:10.923314Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:58:12.268776Z","iopub.execute_input":"2024-09-16T09:58:12.269887Z","iopub.status.idle":"2024-09-16T09:58:12.275938Z","shell.execute_reply.started":"2024-09-16T09:58:12.269846Z","shell.execute_reply":"2024-09-16T09:58:12.275027Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from ultralytics import YOLO\n\n# Load a model\nmodel = YOLO('yolov8m.pt')","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:16:49.819771Z","iopub.execute_input":"2024-09-16T09:16:49.820553Z","iopub.status.idle":"2024-09-16T09:16:54.714997Z","shell.execute_reply.started":"2024-09-16T09:16:49.820494Z","shell.execute_reply":"2024-09-16T09:16:54.713871Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"epochs = 50\n\nimgsz=1024\nbatch = 8\nsave_period = 5\ndevice = \"0,1\"\ncache = False\npretrained = True\nYAML_FILE = '/kaggle/working/Merged-Project-2-2/data.yaml'\nproject = 'obb'\nname = 'custom_obb'\n\nmodel.train(\n    data=YAML_FILE,\n    device=device,\n    epochs=epochs,\n    imgsz=imgsz,\n    batch=batch,\n    cache=cache,\n    save=True,            # Save model weights after each epoch\n    save_period=save_period,        # Save model every 5 epochs (you can adjust this)\n    project=project,\n    name=name,\n    patience=0,\n    augment=False,\n)","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:58:15.511638Z","iopub.execute_input":"2024-09-16T09:58:15.512369Z","iopub.status.idle":"2024-09-16T10:00:01.149643Z","shell.execute_reply.started":"2024-09-16T09:58:15.512332Z","shell.execute_reply":"2024-09-16T10:00:01.147305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"!zip -r WindDefectsModel.zip /kaggle/working\"","metadata":{"execution":{"iopub.status.busy":"2024-09-16T09:14:58.487008Z","iopub.status.idle":"2024-09-16T09:14:58.487363Z","shell.execute_reply.started":"2024-09-16T09:14:58.487186Z","shell.execute_reply":"2024-09-16T09:14:58.487204Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ls -lh /kaggle/temp/","metadata":{"execution":{"iopub.status.busy":"2024-09-17T05:30:10.790024Z","iopub.execute_input":"2024-09-17T05:30:10.790392Z","iopub.status.idle":"2024-09-17T05:30:11.779133Z","shell.execute_reply.started":"2024-09-17T05:30:10.790349Z","shell.execute_reply":"2024-09-17T05:30:11.778237Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}